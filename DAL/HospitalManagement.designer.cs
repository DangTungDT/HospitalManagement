#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HospitalManagement")]
	public partial class HospitalManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertSupplyHistory(SupplyHistory instance);
    partial void UpdateSupplyHistory(SupplyHistory instance);
    partial void DeleteSupplyHistory(SupplyHistory instance);
    partial void InsertAppointment(Appointment instance);
    partial void UpdateAppointment(Appointment instance);
    partial void DeleteAppointment(Appointment instance);
    partial void InsertDailyCare(DailyCare instance);
    partial void UpdateDailyCare(DailyCare instance);
    partial void DeleteDailyCare(DailyCare instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDoctorPatient(DoctorPatient instance);
    partial void UpdateDoctorPatient(DoctorPatient instance);
    partial void DeleteDoctorPatient(DoctorPatient instance);
    partial void InsertInventory(Inventory instance);
    partial void UpdateInventory(Inventory instance);
    partial void DeleteInventory(Inventory instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertLaboratoryTest(LaboratoryTest instance);
    partial void UpdateLaboratoryTest(LaboratoryTest instance);
    partial void DeleteLaboratoryTest(LaboratoryTest instance);
    partial void InsertLabTestType(LabTestType instance);
    partial void UpdateLabTestType(LabTestType instance);
    partial void DeleteLabTestType(LabTestType instance);
    partial void InsertMedicalOrder(MedicalOrder instance);
    partial void UpdateMedicalOrder(MedicalOrder instance);
    partial void DeleteMedicalOrder(MedicalOrder instance);
    partial void InsertMedicalRecord(MedicalRecord instance);
    partial void UpdateMedicalRecord(MedicalRecord instance);
    partial void DeleteMedicalRecord(MedicalRecord instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertSalary(Salary instance);
    partial void UpdateSalary(Salary instance);
    partial void DeleteSalary(Salary instance);
    partial void InsertSalaryDetail(SalaryDetail instance);
    partial void UpdateSalaryDetail(SalaryDetail instance);
    partial void DeleteSalaryDetail(SalaryDetail instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    #endregion
		
		public HospitalManagementDataContext() : 
				base(global::DAL.Properties.Settings.Default.HospitalManagementConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HospitalManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<SupplyHistory> SupplyHistories
		{
			get
			{
				return this.GetTable<SupplyHistory>();
			}
		}
		
		public System.Data.Linq.Table<Appointment> Appointments
		{
			get
			{
				return this.GetTable<Appointment>();
			}
		}
		
		public System.Data.Linq.Table<DailyCare> DailyCares
		{
			get
			{
				return this.GetTable<DailyCare>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<DoctorPatient> DoctorPatients
		{
			get
			{
				return this.GetTable<DoctorPatient>();
			}
		}
		
		public System.Data.Linq.Table<Inventory> Inventories
		{
			get
			{
				return this.GetTable<Inventory>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<LaboratoryTest> LaboratoryTests
		{
			get
			{
				return this.GetTable<LaboratoryTest>();
			}
		}
		
		public System.Data.Linq.Table<LabTestType> LabTestTypes
		{
			get
			{
				return this.GetTable<LabTestType>();
			}
		}
		
		public System.Data.Linq.Table<MedicalOrder> MedicalOrders
		{
			get
			{
				return this.GetTable<MedicalOrder>();
			}
		}
		
		public System.Data.Linq.Table<MedicalRecord> MedicalRecords
		{
			get
			{
				return this.GetTable<MedicalRecord>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Salary> Salaries
		{
			get
			{
				return this.GetTable<Salary>();
			}
		}
		
		public System.Data.Linq.Table<SalaryDetail> SalaryDetails
		{
			get
			{
				return this.GetTable<SalaryDetail>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _startDate;
		
		private string _staffID;
		
		private string _status;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateChanged();
    partial void OnstaffIDChanging(string value);
    partial void OnstaffIDChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public Account()
		{
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="Char(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="Char(255)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date")]
		public System.Nullable<System.DateTime> startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_staffID", DbType="Char(10)")]
		public string staffID
		{
			get
			{
				return this._staffID;
			}
			set
			{
				if ((this._staffID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstaffIDChanging(value);
					this.SendPropertyChanging();
					this._staffID = value;
					this.SendPropertyChanged("staffID");
					this.OnstaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Char(100)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Staff", ThisKey="staffID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._staffID = value.id;
					}
					else
					{
						this._staffID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupplyHistory")]
	public partial class SupplyHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _itemID;
		
		private int _roomID;
		
		private string _nurseID;
		
		private string _dosage;
		
		private System.Nullable<int> _quantity;
		
		private string _unit;
		
		private string _note;
		
		private string _PatientID;
		
		private string _typeSupply;
		
		private System.Nullable<System.DateTime> _dateSupply;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnitemIDChanging(string value);
    partial void OnitemIDChanged();
    partial void OnroomIDChanging(int value);
    partial void OnroomIDChanged();
    partial void OnnurseIDChanging(string value);
    partial void OnnurseIDChanged();
    partial void OndosageChanging(string value);
    partial void OndosageChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnunitChanging(string value);
    partial void OnunitChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OntypeSupplyChanging(string value);
    partial void OntypeSupplyChanged();
    partial void OndateSupplyChanging(System.Nullable<System.DateTime> value);
    partial void OndateSupplyChanged();
    #endregion
		
		public SupplyHistory()
		{
			this._Item = default(EntityRef<Item>);
			this._Patient = default(EntityRef<Patient>);
			this._Room = default(EntityRef<Room>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string itemID
		{
			get
			{
				return this._itemID;
			}
			set
			{
				if ((this._itemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIDChanging(value);
					this.SendPropertyChanging();
					this._itemID = value;
					this.SendPropertyChanged("itemID");
					this.OnitemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomID", DbType="Int NOT NULL")]
		public int roomID
		{
			get
			{
				return this._roomID;
			}
			set
			{
				if ((this._roomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIDChanging(value);
					this.SendPropertyChanging();
					this._roomID = value;
					this.SendPropertyChanged("roomID");
					this.OnroomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string nurseID
		{
			get
			{
				return this._nurseID;
			}
			set
			{
				if ((this._nurseID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIDChanging(value);
					this.SendPropertyChanging();
					this._nurseID = value;
					this.SendPropertyChanged("nurseID");
					this.OnnurseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dosage", DbType="VarChar(255)")]
		public string dosage
		{
			get
			{
				return this._dosage;
			}
			set
			{
				if ((this._dosage != value))
				{
					this.OndosageChanging(value);
					this.SendPropertyChanging();
					this._dosage = value;
					this.SendPropertyChanged("dosage");
					this.OndosageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unit", DbType="NVarChar(255)")]
		public string unit
		{
			get
			{
				return this._unit;
			}
			set
			{
				if ((this._unit != value))
				{
					this.OnunitChanging(value);
					this.SendPropertyChanging();
					this._unit = value;
					this.SendPropertyChanged("unit");
					this.OnunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Char(10)")]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeSupply", DbType="NVarChar(100)")]
		public string typeSupply
		{
			get
			{
				return this._typeSupply;
			}
			set
			{
				if ((this._typeSupply != value))
				{
					this.OntypeSupplyChanging(value);
					this.SendPropertyChanging();
					this._typeSupply = value;
					this.SendPropertyChanged("typeSupply");
					this.OntypeSupplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateSupply", DbType="Date")]
		public System.Nullable<System.DateTime> dateSupply
		{
			get
			{
				return this._dateSupply;
			}
			set
			{
				if ((this._dateSupply != value))
				{
					this.OndateSupplyChanging(value);
					this.SendPropertyChanging();
					this._dateSupply = value;
					this.SendPropertyChanged("dateSupply");
					this.OndateSupplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_SupplyHistory", Storage="_Item", ThisKey="itemID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.SupplyHistories.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.SupplyHistories.Add(this);
						this._itemID = value.ID;
					}
					else
					{
						this._itemID = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_SupplyHistory", Storage="_Patient", ThisKey="PatientID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.SupplyHistories.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.SupplyHistories.Add(this);
						this._PatientID = value.id;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_SupplyHistory", Storage="_Room", ThisKey="roomID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.SupplyHistories.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.SupplyHistories.Add(this);
						this._roomID = value.id;
					}
					else
					{
						this._roomID = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SupplyHistory", Storage="_Staff", ThisKey="nurseID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.SupplyHistories.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.SupplyHistories.Add(this);
						this._nurseID = value.id;
					}
					else
					{
						this._nurseID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _startDate;
		
		private string _note;
		
		private string _status;
		
		private string _doctorID;
		
		private string _patientID;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OndoctorIDChanging(string value);
    partial void OndoctorIDChanged();
    partial void OnpatientIDChanging(string value);
    partial void OnpatientIDChanged();
    #endregion
		
		public Appointment()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(100)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorID", DbType="Char(10)")]
		public string doctorID
		{
			get
			{
				return this._doctorID;
			}
			set
			{
				if ((this._doctorID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIDChanging(value);
					this.SendPropertyChanging();
					this._doctorID = value;
					this.SendPropertyChanged("doctorID");
					this.OndoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientID", DbType="Char(10)")]
		public string patientID
		{
			get
			{
				return this._patientID;
			}
			set
			{
				if ((this._patientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIDChanging(value);
					this.SendPropertyChanging();
					this._patientID = value;
					this.SendPropertyChanged("patientID");
					this.OnpatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Patient", ThisKey="patientID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._patientID = value.id;
					}
					else
					{
						this._patientID = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Appointment", Storage="_Staff", ThisKey="doctorID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Appointments.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Appointments.Add(this);
						this._doctorID = value.id;
					}
					else
					{
						this._doctorID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DailyCare")]
	public partial class DailyCare : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _shift;
		
		private string _bloodPressure;
		
		private System.Nullable<decimal> _bodyTempearature;
		
		private System.Nullable<int> _pulseRate;
		
		private System.Nullable<System.DateTime> _dateCare;
		
		private string _note;
		
		private string _patientID;
		
		private System.Nullable<int> _roomID;
		
		private string _nurseID;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnshiftChanging(string value);
    partial void OnshiftChanged();
    partial void OnbloodPressureChanging(string value);
    partial void OnbloodPressureChanged();
    partial void OnbodyTempearatureChanging(System.Nullable<decimal> value);
    partial void OnbodyTempearatureChanged();
    partial void OnpulseRateChanging(System.Nullable<int> value);
    partial void OnpulseRateChanged();
    partial void OndateCareChanging(System.Nullable<System.DateTime> value);
    partial void OndateCareChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    partial void OnpatientIDChanging(string value);
    partial void OnpatientIDChanged();
    partial void OnroomIDChanging(System.Nullable<int> value);
    partial void OnroomIDChanged();
    partial void OnnurseIDChanging(string value);
    partial void OnnurseIDChanged();
    #endregion
		
		public DailyCare()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Room = default(EntityRef<Room>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shift", DbType="NVarChar(100)")]
		public string shift
		{
			get
			{
				return this._shift;
			}
			set
			{
				if ((this._shift != value))
				{
					this.OnshiftChanging(value);
					this.SendPropertyChanging();
					this._shift = value;
					this.SendPropertyChanged("shift");
					this.OnshiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bloodPressure", DbType="VarChar(20)")]
		public string bloodPressure
		{
			get
			{
				return this._bloodPressure;
			}
			set
			{
				if ((this._bloodPressure != value))
				{
					this.OnbloodPressureChanging(value);
					this.SendPropertyChanging();
					this._bloodPressure = value;
					this.SendPropertyChanged("bloodPressure");
					this.OnbloodPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bodyTempearature", DbType="Decimal(4,1)")]
		public System.Nullable<decimal> bodyTempearature
		{
			get
			{
				return this._bodyTempearature;
			}
			set
			{
				if ((this._bodyTempearature != value))
				{
					this.OnbodyTempearatureChanging(value);
					this.SendPropertyChanging();
					this._bodyTempearature = value;
					this.SendPropertyChanged("bodyTempearature");
					this.OnbodyTempearatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pulseRate", DbType="Int")]
		public System.Nullable<int> pulseRate
		{
			get
			{
				return this._pulseRate;
			}
			set
			{
				if ((this._pulseRate != value))
				{
					this.OnpulseRateChanging(value);
					this.SendPropertyChanging();
					this._pulseRate = value;
					this.SendPropertyChanged("pulseRate");
					this.OnpulseRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateCare", DbType="Date")]
		public System.Nullable<System.DateTime> dateCare
		{
			get
			{
				return this._dateCare;
			}
			set
			{
				if ((this._dateCare != value))
				{
					this.OndateCareChanging(value);
					this.SendPropertyChanging();
					this._dateCare = value;
					this.SendPropertyChanged("dateCare");
					this.OndateCareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientID", DbType="Char(10)")]
		public string patientID
		{
			get
			{
				return this._patientID;
			}
			set
			{
				if ((this._patientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIDChanging(value);
					this.SendPropertyChanging();
					this._patientID = value;
					this.SendPropertyChanged("patientID");
					this.OnpatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomID", DbType="Int")]
		public System.Nullable<int> roomID
		{
			get
			{
				return this._roomID;
			}
			set
			{
				if ((this._roomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroomIDChanging(value);
					this.SendPropertyChanging();
					this._roomID = value;
					this.SendPropertyChanged("roomID");
					this.OnroomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nurseID", DbType="Char(10)")]
		public string nurseID
		{
			get
			{
				return this._nurseID;
			}
			set
			{
				if ((this._nurseID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnurseIDChanging(value);
					this.SendPropertyChanging();
					this._nurseID = value;
					this.SendPropertyChanged("nurseID");
					this.OnnurseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_DailyCare", Storage="_Patient", ThisKey="patientID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.DailyCares.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.DailyCares.Add(this);
						this._patientID = value.id;
					}
					else
					{
						this._patientID = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_DailyCare", Storage="_Room", ThisKey="roomID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.DailyCares.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.DailyCares.Add(this);
						this._roomID = value.id;
					}
					else
					{
						this._roomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DailyCare", Storage="_Staff", ThisKey="nurseID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.DailyCares.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.DailyCares.Add(this);
						this._nurseID = value.id;
					}
					else
					{
						this._nurseID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _departmentName;
		
		private string _description;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OndepartmentNameChanging(string value);
    partial void OndepartmentNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Department()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentName", DbType="NVarChar(255)")]
		public string departmentName
		{
			get
			{
				return this._departmentName;
			}
			set
			{
				if ((this._departmentName != value))
				{
					this.OndepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._departmentName = value;
					this.SendPropertyChanged("departmentName");
					this.OndepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Staffs", ThisKey="id", OtherKey="departmentID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DoctorPatient")]
	public partial class DoctorPatient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _doctorID;
		
		private string _patientID;
		
		private System.DateTime _startDate;
		
		private System.Nullable<System.DateTime> _endDate;
		
		private string _role;
		
		private string _note;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndoctorIDChanging(string value);
    partial void OndoctorIDChanged();
    partial void OnpatientIDChanging(string value);
    partial void OnpatientIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.Nullable<System.DateTime> value);
    partial void OnendDateChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    #endregion
		
		public DoctorPatient()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string doctorID
		{
			get
			{
				return this._doctorID;
			}
			set
			{
				if ((this._doctorID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIDChanging(value);
					this.SendPropertyChanging();
					this._doctorID = value;
					this.SendPropertyChanged("doctorID");
					this.OndoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string patientID
		{
			get
			{
				return this._patientID;
			}
			set
			{
				if ((this._patientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIDChanging(value);
					this.SendPropertyChanging();
					this._patientID = value;
					this.SendPropertyChanged("patientID");
					this.OnpatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date")]
		public System.Nullable<System.DateTime> endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(50)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_DoctorPatient", Storage="_Patient", ThisKey="patientID", OtherKey="id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.DoctorPatients.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.DoctorPatients.Add(this);
						this._patientID = value.id;
					}
					else
					{
						this._patientID = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DoctorPatient", Storage="_Staff", ThisKey="doctorID", OtherKey="id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.DoctorPatients.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.DoctorPatients.Add(this);
						this._doctorID = value.id;
					}
					else
					{
						this._doctorID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inventory")]
	public partial class Inventory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ItemID;
		
		private int _Quantity;
		
		private System.Nullable<System.DateTime> _LastUpdated;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnItemIDChanging(string value);
    partial void OnItemIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedChanged();
    #endregion
		
		public Inventory()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Char(10)")]
		public string ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Inventory", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Inventories.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Inventories.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _ItemName;
		
		private string _ItemType;
		
		private string _Unit;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private bool _IsActive;
		
		private EntitySet<SupplyHistory> _SupplyHistories;
		
		private EntitySet<Inventory> _Inventories;
		
		private EntitySet<MedicalOrder> _MedicalOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemTypeChanging(string value);
    partial void OnItemTypeChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Item()
		{
			this._SupplyHistories = new EntitySet<SupplyHistory>(new Action<SupplyHistory>(this.attach_SupplyHistories), new Action<SupplyHistory>(this.detach_SupplyHistories));
			this._Inventories = new EntitySet<Inventory>(new Action<Inventory>(this.attach_Inventories), new Action<Inventory>(this.detach_Inventories));
			this._MedicalOrders = new EntitySet<MedicalOrder>(new Action<MedicalOrder>(this.attach_MedicalOrders), new Action<MedicalOrder>(this.detach_MedicalOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="NVarChar(100)")]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_SupplyHistory", Storage="_SupplyHistories", ThisKey="ID", OtherKey="itemID")]
		public EntitySet<SupplyHistory> SupplyHistories
		{
			get
			{
				return this._SupplyHistories;
			}
			set
			{
				this._SupplyHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Inventory", Storage="_Inventories", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<Inventory> Inventories
		{
			get
			{
				return this._Inventories;
			}
			set
			{
				this._Inventories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_MedicalOrder", Storage="_MedicalOrders", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<MedicalOrder> MedicalOrders
		{
			get
			{
				return this._MedicalOrders;
			}
			set
			{
				this._MedicalOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Inventories(Inventory entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaboratoryTest")]
	public partial class LaboratoryTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _MedicalOrderID;
		
		private System.Nullable<System.DateTime> _startDate;
		
		private string _resultValue;
		
		private string _resultUnit;
		
		private string _result;
		
		private string _status;
		
		private string _note;
		
		private EntityRef<MedicalOrder> _MedicalOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnMedicalOrderIDChanging(int value);
    partial void OnMedicalOrderIDChanged();
    partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateChanged();
    partial void OnresultValueChanging(string value);
    partial void OnresultValueChanged();
    partial void OnresultUnitChanging(string value);
    partial void OnresultUnitChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnnoteChanging(string value);
    partial void OnnoteChanged();
    #endregion
		
		public LaboratoryTest()
		{
			this._MedicalOrder = default(EntityRef<MedicalOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalOrderID", DbType="Int NOT NULL")]
		public int MedicalOrderID
		{
			get
			{
				return this._MedicalOrderID;
			}
			set
			{
				if ((this._MedicalOrderID != value))
				{
					if (this._MedicalOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicalOrderIDChanging(value);
					this.SendPropertyChanging();
					this._MedicalOrderID = value;
					this.SendPropertyChanged("MedicalOrderID");
					this.OnMedicalOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resultValue", DbType="NVarChar(100)")]
		public string resultValue
		{
			get
			{
				return this._resultValue;
			}
			set
			{
				if ((this._resultValue != value))
				{
					this.OnresultValueChanging(value);
					this.SendPropertyChanging();
					this._resultValue = value;
					this.SendPropertyChanged("resultValue");
					this.OnresultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resultUnit", DbType="NVarChar(50)")]
		public string resultUnit
		{
			get
			{
				return this._resultUnit;
			}
			set
			{
				if ((this._resultUnit != value))
				{
					this.OnresultUnitChanging(value);
					this.SendPropertyChanging();
					this._resultUnit = value;
					this.SendPropertyChanged("resultUnit");
					this.OnresultUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="NVarChar(255)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string note
		{
			get
			{
				return this._note;
			}
			set
			{
				if ((this._note != value))
				{
					this.OnnoteChanging(value);
					this.SendPropertyChanging();
					this._note = value;
					this.SendPropertyChanged("note");
					this.OnnoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalOrder_LaboratoryTest", Storage="_MedicalOrder", ThisKey="MedicalOrderID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MedicalOrder MedicalOrder
		{
			get
			{
				return this._MedicalOrder.Entity;
			}
			set
			{
				MedicalOrder previousValue = this._MedicalOrder.Entity;
				if (((previousValue != value) 
							|| (this._MedicalOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicalOrder.Entity = null;
						previousValue.LaboratoryTests.Remove(this);
					}
					this._MedicalOrder.Entity = value;
					if ((value != null))
					{
						value.LaboratoryTests.Add(this);
						this._MedicalOrderID = value.id;
					}
					else
					{
						this._MedicalOrderID = default(int);
					}
					this.SendPropertyChanged("MedicalOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabTestType")]
	public partial class LabTestType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _testTypeName;
		
		private EntitySet<MedicalOrder> _MedicalOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntestTypeNameChanging(string value);
    partial void OntestTypeNameChanged();
    #endregion
		
		public LabTestType()
		{
			this._MedicalOrders = new EntitySet<MedicalOrder>(new Action<MedicalOrder>(this.attach_MedicalOrders), new Action<MedicalOrder>(this.detach_MedicalOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_testTypeName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string testTypeName
		{
			get
			{
				return this._testTypeName;
			}
			set
			{
				if ((this._testTypeName != value))
				{
					this.OntestTypeNameChanging(value);
					this.SendPropertyChanging();
					this._testTypeName = value;
					this.SendPropertyChanged("testTypeName");
					this.OntestTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTestType_MedicalOrder", Storage="_MedicalOrders", ThisKey="id", OtherKey="TestTypeID")]
		public EntitySet<MedicalOrder> MedicalOrders
		{
			get
			{
				return this._MedicalOrders;
			}
			set
			{
				this._MedicalOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.LabTestType = this;
		}
		
		private void detach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.LabTestType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalOrder")]
	public partial class MedicalOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _PatientID;
		
		private string _DoctorID;
		
		private string _OrderType;
		
		private string _ItemID;
		
		private System.Nullable<int> _TestTypeID;
		
		private System.Nullable<bool> _HasLabTest;
		
		private string _Dosage;
		
		private System.Nullable<decimal> _Quantity;
		
		private string _Unit;
		
		private string _Frequency;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private System.Nullable<System.DateTime> _SignedAt;
		
		private string _Note;
		
		private EntitySet<LaboratoryTest> _LaboratoryTests;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<LabTestType> _LabTestType;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPatientIDChanging(string value);
    partial void OnPatientIDChanged();
    partial void OnDoctorIDChanging(string value);
    partial void OnDoctorIDChanged();
    partial void OnOrderTypeChanging(string value);
    partial void OnOrderTypeChanged();
    partial void OnItemIDChanging(string value);
    partial void OnItemIDChanged();
    partial void OnTestTypeIDChanging(System.Nullable<int> value);
    partial void OnTestTypeIDChanged();
    partial void OnHasLabTestChanging(System.Nullable<bool> value);
    partial void OnHasLabTestChanged();
    partial void OnDosageChanging(string value);
    partial void OnDosageChanged();
    partial void OnQuantityChanging(System.Nullable<decimal> value);
    partial void OnQuantityChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnFrequencyChanging(string value);
    partial void OnFrequencyChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnSignedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnSignedAtChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public MedicalOrder()
		{
			this._LaboratoryTests = new EntitySet<LaboratoryTest>(new Action<LaboratoryTest>(this.attach_LaboratoryTests), new Action<LaboratoryTest>(this.detach_LaboratoryTests));
			this._Item = default(EntityRef<Item>);
			this._LabTestType = default(EntityRef<LabTestType>);
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this.OnOrderTypeChanging(value);
					this.SendPropertyChanging();
					this._OrderType = value;
					this.SendPropertyChanged("OrderType");
					this.OnOrderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Char(10)")]
		public string ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestTypeID", DbType="Int")]
		public System.Nullable<int> TestTypeID
		{
			get
			{
				return this._TestTypeID;
			}
			set
			{
				if ((this._TestTypeID != value))
				{
					if (this._LabTestType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TestTypeID = value;
					this.SendPropertyChanged("TestTypeID");
					this.OnTestTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasLabTest", DbType="Bit")]
		public System.Nullable<bool> HasLabTest
		{
			get
			{
				return this._HasLabTest;
			}
			set
			{
				if ((this._HasLabTest != value))
				{
					this.OnHasLabTestChanging(value);
					this.SendPropertyChanging();
					this._HasLabTest = value;
					this.SendPropertyChanged("HasLabTest");
					this.OnHasLabTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dosage", DbType="VarChar(100)")]
		public string Dosage
		{
			get
			{
				return this._Dosage;
			}
			set
			{
				if ((this._Dosage != value))
				{
					this.OnDosageChanging(value);
					this.SendPropertyChanging();
					this._Dosage = value;
					this.SendPropertyChanged("Dosage");
					this.OnDosageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(8,2)")]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="VarChar(20)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="VarChar(50)")]
		public string Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> SignedAt
		{
			get
			{
				return this._SignedAt;
			}
			set
			{
				if ((this._SignedAt != value))
				{
					this.OnSignedAtChanging(value);
					this.SendPropertyChanging();
					this._SignedAt = value;
					this.SendPropertyChanged("SignedAt");
					this.OnSignedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicalOrder_LaboratoryTest", Storage="_LaboratoryTests", ThisKey="id", OtherKey="MedicalOrderID")]
		public EntitySet<LaboratoryTest> LaboratoryTests
		{
			get
			{
				return this._LaboratoryTests;
			}
			set
			{
				this._LaboratoryTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_MedicalOrder", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.MedicalOrders.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.MedicalOrders.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabTestType_MedicalOrder", Storage="_LabTestType", ThisKey="TestTypeID", OtherKey="id", IsForeignKey=true, DeleteRule="SET NULL")]
		public LabTestType LabTestType
		{
			get
			{
				return this._LabTestType.Entity;
			}
			set
			{
				LabTestType previousValue = this._LabTestType.Entity;
				if (((previousValue != value) 
							|| (this._LabTestType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LabTestType.Entity = null;
						previousValue.MedicalOrders.Remove(this);
					}
					this._LabTestType.Entity = value;
					if ((value != null))
					{
						value.MedicalOrders.Add(this);
						this._TestTypeID = value.id;
					}
					else
					{
						this._TestTypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LabTestType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalOrder", Storage="_Patient", ThisKey="PatientID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.MedicalOrders.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.MedicalOrders.Add(this);
						this._PatientID = value.id;
					}
					else
					{
						this._PatientID = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_MedicalOrder", Storage="_Staff", ThisKey="DoctorID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.MedicalOrders.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.MedicalOrders.Add(this);
						this._DoctorID = value.id;
					}
					else
					{
						this._DoctorID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LaboratoryTests(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.MedicalOrder = this;
		}
		
		private void detach_LaboratoryTests(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.MedicalOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicalRecord")]
	public partial class MedicalRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _patientID;
		
		private string _doctorID;
		
		private string _diagnosis;
		
		private string _treatmentPlan;
		
		private string _prescription;
		
		private string _vitalSigns;
		
		private System.Nullable<System.DateTime> _createdDate;
		
		private string _notes;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnpatientIDChanging(string value);
    partial void OnpatientIDChanged();
    partial void OndoctorIDChanging(string value);
    partial void OndoctorIDChanged();
    partial void OndiagnosisChanging(string value);
    partial void OndiagnosisChanged();
    partial void OntreatmentPlanChanging(string value);
    partial void OntreatmentPlanChanged();
    partial void OnprescriptionChanging(string value);
    partial void OnprescriptionChanged();
    partial void OnvitalSignsChanging(string value);
    partial void OnvitalSignsChanged();
    partial void OncreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedDateChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    #endregion
		
		public MedicalRecord()
		{
			this._Patient = default(EntityRef<Patient>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string patientID
		{
			get
			{
				return this._patientID;
			}
			set
			{
				if ((this._patientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientIDChanging(value);
					this.SendPropertyChanging();
					this._patientID = value;
					this.SendPropertyChanged("patientID");
					this.OnpatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctorID", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string doctorID
		{
			get
			{
				return this._doctorID;
			}
			set
			{
				if ((this._doctorID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndoctorIDChanging(value);
					this.SendPropertyChanging();
					this._doctorID = value;
					this.SendPropertyChanged("doctorID");
					this.OndoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnosis", DbType="NVarChar(500)")]
		public string diagnosis
		{
			get
			{
				return this._diagnosis;
			}
			set
			{
				if ((this._diagnosis != value))
				{
					this.OndiagnosisChanging(value);
					this.SendPropertyChanging();
					this._diagnosis = value;
					this.SendPropertyChanged("diagnosis");
					this.OndiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_treatmentPlan", DbType="NVarChar(500)")]
		public string treatmentPlan
		{
			get
			{
				return this._treatmentPlan;
			}
			set
			{
				if ((this._treatmentPlan != value))
				{
					this.OntreatmentPlanChanging(value);
					this.SendPropertyChanging();
					this._treatmentPlan = value;
					this.SendPropertyChanged("treatmentPlan");
					this.OntreatmentPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prescription", DbType="NVarChar(500)")]
		public string prescription
		{
			get
			{
				return this._prescription;
			}
			set
			{
				if ((this._prescription != value))
				{
					this.OnprescriptionChanging(value);
					this.SendPropertyChanging();
					this._prescription = value;
					this.SendPropertyChanged("prescription");
					this.OnprescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vitalSigns", DbType="NVarChar(255)")]
		public string vitalSigns
		{
			get
			{
				return this._vitalSigns;
			}
			set
			{
				if ((this._vitalSigns != value))
				{
					this.OnvitalSignsChanging(value);
					this.SendPropertyChanging();
					this._vitalSigns = value;
					this.SendPropertyChanged("vitalSigns");
					this.OnvitalSignsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="NVarChar(1000)")]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalRecord", Storage="_Patient", ThisKey="patientID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.MedicalRecords.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.MedicalRecords.Add(this);
						this._patientID = value.id;
					}
					else
					{
						this._patientID = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_MedicalRecord", Storage="_Staff", ThisKey="doctorID", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.MedicalRecords.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.MedicalRecords.Add(this);
						this._doctorID = value.id;
					}
					else
					{
						this._doctorID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _fullName;
		
		private string _gender;
		
		private System.Nullable<System.DateTime> _dob;
		
		private string _phoneNumber;
		
		private string _TypePatient;
		
		private string _citizenID;
		
		private string _InsuranceID;
		
		private string _address;
		
		private string _EmergencyContact;
		
		private string _EmergencyPhone;
		
		private string _status;
		
		private System.Nullable<System.DateTime> _createdDate;
		
		private System.Nullable<System.DateTime> _updatedDate;
		
		private System.Nullable<double> _weight;
		
		private System.Nullable<double> _height;
		
		private EntitySet<SupplyHistory> _SupplyHistories;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<DailyCare> _DailyCares;
		
		private EntitySet<DoctorPatient> _DoctorPatients;
		
		private EntitySet<MedicalOrder> _MedicalOrders;
		
		private EntitySet<MedicalRecord> _MedicalRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OndobChanging(System.Nullable<System.DateTime> value);
    partial void OndobChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnTypePatientChanging(string value);
    partial void OnTypePatientChanged();
    partial void OncitizenIDChanging(string value);
    partial void OncitizenIDChanged();
    partial void OnInsuranceIDChanging(string value);
    partial void OnInsuranceIDChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnEmergencyContactChanging(string value);
    partial void OnEmergencyContactChanged();
    partial void OnEmergencyPhoneChanging(string value);
    partial void OnEmergencyPhoneChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OncreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OncreatedDateChanged();
    partial void OnupdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnupdatedDateChanged();
    partial void OnweightChanging(System.Nullable<double> value);
    partial void OnweightChanged();
    partial void OnheightChanging(System.Nullable<double> value);
    partial void OnheightChanged();
    #endregion
		
		public Patient()
		{
			this._SupplyHistories = new EntitySet<SupplyHistory>(new Action<SupplyHistory>(this.attach_SupplyHistories), new Action<SupplyHistory>(this.detach_SupplyHistories));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._DailyCares = new EntitySet<DailyCare>(new Action<DailyCare>(this.attach_DailyCares), new Action<DailyCare>(this.detach_DailyCares));
			this._DoctorPatients = new EntitySet<DoctorPatient>(new Action<DoctorPatient>(this.attach_DoctorPatients), new Action<DoctorPatient>(this.detach_DoctorPatients));
			this._MedicalOrders = new EntitySet<MedicalOrder>(new Action<MedicalOrder>(this.attach_MedicalOrders), new Action<MedicalOrder>(this.detach_MedicalOrders));
			this._MedicalRecords = new EntitySet<MedicalRecord>(new Action<MedicalRecord>(this.attach_MedicalRecords), new Action<MedicalRecord>(this.detach_MedicalRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NVarChar(10)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date")]
		public System.Nullable<System.DateTime> dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(15)")]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypePatient", DbType="VarChar(20)")]
		public string TypePatient
		{
			get
			{
				return this._TypePatient;
			}
			set
			{
				if ((this._TypePatient != value))
				{
					this.OnTypePatientChanging(value);
					this.SendPropertyChanging();
					this._TypePatient = value;
					this.SendPropertyChanged("TypePatient");
					this.OnTypePatientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_citizenID", DbType="VarChar(20)")]
		public string citizenID
		{
			get
			{
				return this._citizenID;
			}
			set
			{
				if ((this._citizenID != value))
				{
					this.OncitizenIDChanging(value);
					this.SendPropertyChanging();
					this._citizenID = value;
					this.SendPropertyChanged("citizenID");
					this.OncitizenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="VarChar(20)")]
		public string InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(255)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyContact", DbType="NVarChar(255)")]
		public string EmergencyContact
		{
			get
			{
				return this._EmergencyContact;
			}
			set
			{
				if ((this._EmergencyContact != value))
				{
					this.OnEmergencyContactChanging(value);
					this.SendPropertyChanging();
					this._EmergencyContact = value;
					this.SendPropertyChanged("EmergencyContact");
					this.OnEmergencyContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyPhone", DbType="VarChar(15)")]
		public string EmergencyPhone
		{
			get
			{
				return this._EmergencyPhone;
			}
			set
			{
				if ((this._EmergencyPhone != value))
				{
					this.OnEmergencyPhoneChanging(value);
					this.SendPropertyChanging();
					this._EmergencyPhone = value;
					this.SendPropertyChanged("EmergencyPhone");
					this.OnEmergencyPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> updatedDate
		{
			get
			{
				return this._updatedDate;
			}
			set
			{
				if ((this._updatedDate != value))
				{
					this.OnupdatedDateChanging(value);
					this.SendPropertyChanging();
					this._updatedDate = value;
					this.SendPropertyChanged("updatedDate");
					this.OnupdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Float")]
		public System.Nullable<double> weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Float")]
		public System.Nullable<double> height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_SupplyHistory", Storage="_SupplyHistories", ThisKey="id", OtherKey="PatientID")]
		public EntitySet<SupplyHistory> SupplyHistories
		{
			get
			{
				return this._SupplyHistories;
			}
			set
			{
				this._SupplyHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Appointment", Storage="_Appointments", ThisKey="id", OtherKey="patientID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_DailyCare", Storage="_DailyCares", ThisKey="id", OtherKey="patientID")]
		public EntitySet<DailyCare> DailyCares
		{
			get
			{
				return this._DailyCares;
			}
			set
			{
				this._DailyCares.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_DoctorPatient", Storage="_DoctorPatients", ThisKey="id", OtherKey="patientID")]
		public EntitySet<DoctorPatient> DoctorPatients
		{
			get
			{
				return this._DoctorPatients;
			}
			set
			{
				this._DoctorPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalOrder", Storage="_MedicalOrders", ThisKey="id", OtherKey="PatientID")]
		public EntitySet<MedicalOrder> MedicalOrders
		{
			get
			{
				return this._MedicalOrders;
			}
			set
			{
				this._MedicalOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_MedicalRecord", Storage="_MedicalRecords", ThisKey="id", OtherKey="patientID")]
		public EntitySet<MedicalRecord> MedicalRecords
		{
			get
			{
				return this._MedicalRecords;
			}
			set
			{
				this._MedicalRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_DailyCares(DailyCare entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_DailyCares(DailyCare entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_DoctorPatients(DoctorPatient entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_DoctorPatients(DoctorPatient entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_MedicalRecords(MedicalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_MedicalRecords(MedicalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _roomName;
		
		private System.Nullable<int> _bedCount;
		
		private string _departmentID;
		
		private EntitySet<SupplyHistory> _SupplyHistories;
		
		private EntitySet<DailyCare> _DailyCares;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnroomNameChanging(string value);
    partial void OnroomNameChanged();
    partial void OnbedCountChanging(System.Nullable<int> value);
    partial void OnbedCountChanged();
    partial void OndepartmentIDChanging(string value);
    partial void OndepartmentIDChanged();
    #endregion
		
		public Room()
		{
			this._SupplyHistories = new EntitySet<SupplyHistory>(new Action<SupplyHistory>(this.attach_SupplyHistories), new Action<SupplyHistory>(this.detach_SupplyHistories));
			this._DailyCares = new EntitySet<DailyCare>(new Action<DailyCare>(this.attach_DailyCares), new Action<DailyCare>(this.detach_DailyCares));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomName", DbType="NVarChar(100)")]
		public string roomName
		{
			get
			{
				return this._roomName;
			}
			set
			{
				if ((this._roomName != value))
				{
					this.OnroomNameChanging(value);
					this.SendPropertyChanging();
					this._roomName = value;
					this.SendPropertyChanged("roomName");
					this.OnroomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bedCount", DbType="Int")]
		public System.Nullable<int> bedCount
		{
			get
			{
				return this._bedCount;
			}
			set
			{
				if ((this._bedCount != value))
				{
					this.OnbedCountChanging(value);
					this.SendPropertyChanging();
					this._bedCount = value;
					this.SendPropertyChanged("bedCount");
					this.OnbedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentID", DbType="Char(10)")]
		public string departmentID
		{
			get
			{
				return this._departmentID;
			}
			set
			{
				if ((this._departmentID != value))
				{
					this.OndepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._departmentID = value;
					this.SendPropertyChanged("departmentID");
					this.OndepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_SupplyHistory", Storage="_SupplyHistories", ThisKey="id", OtherKey="roomID")]
		public EntitySet<SupplyHistory> SupplyHistories
		{
			get
			{
				return this._SupplyHistories;
			}
			set
			{
				this._SupplyHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_DailyCare", Storage="_DailyCares", ThisKey="id", OtherKey="roomID")]
		public EntitySet<DailyCare> DailyCares
		{
			get
			{
				return this._DailyCares;
			}
			set
			{
				this._DailyCares.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
		
		private void attach_DailyCares(DailyCare entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_DailyCares(DailyCare entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Salary")]
	public partial class Salary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private decimal _BasicSalary;
		
		private EntitySet<SalaryDetail> _SalaryDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnBasicSalaryChanging(decimal value);
    partial void OnBasicSalaryChanged();
    #endregion
		
		public Salary()
		{
			this._SalaryDetails = new EntitySet<SalaryDetail>(new Action<SalaryDetail>(this.attach_SalaryDetails), new Action<SalaryDetail>(this.detach_SalaryDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Decimal(18,2) NOT NULL")]
		public decimal BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
			set
			{
				if ((this._BasicSalary != value))
				{
					this.OnBasicSalaryChanging(value);
					this.SendPropertyChanging();
					this._BasicSalary = value;
					this.SendPropertyChanged("BasicSalary");
					this.OnBasicSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_SalaryDetail", Storage="_SalaryDetails", ThisKey="id", OtherKey="SalaryID")]
		public EntitySet<SalaryDetail> SalaryDetails
		{
			get
			{
				return this._SalaryDetails;
			}
			set
			{
				this._SalaryDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalaryDetails(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Salary = this;
		}
		
		private void detach_SalaryDetails(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Salary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SalaryDetail")]
	public partial class SalaryDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalaryID;
		
		private string _StaffId;
		
		private string _SalaryPeriod;
		
		private System.DateTime _SalaryDate;
		
		private decimal _BasicSalary;
		
		private int _WorkingDays;
		
		private System.Nullable<decimal> _OvertimeHours;
		
		private System.Nullable<decimal> _Allowance;
		
		private System.Nullable<decimal> _Bonus;
		
		private System.Nullable<decimal> _Deduction;
		
		private System.Nullable<decimal> _IncomeTax;
		
		private System.Nullable<decimal> _SocialInsurance;
		
		private System.Nullable<decimal> _NetSalary;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private string _CreatedBy;
		
		private EntityRef<Salary> _Salary;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalaryIDChanging(int value);
    partial void OnSalaryIDChanged();
    partial void OnStaffIdChanging(string value);
    partial void OnStaffIdChanged();
    partial void OnSalaryPeriodChanging(string value);
    partial void OnSalaryPeriodChanged();
    partial void OnSalaryDateChanging(System.DateTime value);
    partial void OnSalaryDateChanged();
    partial void OnBasicSalaryChanging(decimal value);
    partial void OnBasicSalaryChanged();
    partial void OnWorkingDaysChanging(int value);
    partial void OnWorkingDaysChanged();
    partial void OnOvertimeHoursChanging(System.Nullable<decimal> value);
    partial void OnOvertimeHoursChanged();
    partial void OnAllowanceChanging(System.Nullable<decimal> value);
    partial void OnAllowanceChanged();
    partial void OnBonusChanging(System.Nullable<decimal> value);
    partial void OnBonusChanged();
    partial void OnDeductionChanging(System.Nullable<decimal> value);
    partial void OnDeductionChanged();
    partial void OnIncomeTaxChanging(System.Nullable<decimal> value);
    partial void OnIncomeTaxChanged();
    partial void OnSocialInsuranceChanging(System.Nullable<decimal> value);
    partial void OnSocialInsuranceChanged();
    partial void OnNetSalaryChanging(System.Nullable<decimal> value);
    partial void OnNetSalaryChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    #endregion
		
		public SalaryDetail()
		{
			this._Salary = default(EntityRef<Salary>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SalaryID
		{
			get
			{
				return this._SalaryID;
			}
			set
			{
				if ((this._SalaryID != value))
				{
					if (this._Salary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalaryIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryID = value;
					this.SendPropertyChanged("SalaryID");
					this.OnSalaryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryPeriod", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string SalaryPeriod
		{
			get
			{
				return this._SalaryPeriod;
			}
			set
			{
				if ((this._SalaryPeriod != value))
				{
					this.OnSalaryPeriodChanging(value);
					this.SendPropertyChanging();
					this._SalaryPeriod = value;
					this.SendPropertyChanged("SalaryPeriod");
					this.OnSalaryPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime SalaryDate
		{
			get
			{
				return this._SalaryDate;
			}
			set
			{
				if ((this._SalaryDate != value))
				{
					this.OnSalaryDateChanging(value);
					this.SendPropertyChanging();
					this._SalaryDate = value;
					this.SendPropertyChanged("SalaryDate");
					this.OnSalaryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BasicSalary", DbType="Decimal(18,2) NOT NULL")]
		public decimal BasicSalary
		{
			get
			{
				return this._BasicSalary;
			}
			set
			{
				if ((this._BasicSalary != value))
				{
					this.OnBasicSalaryChanging(value);
					this.SendPropertyChanging();
					this._BasicSalary = value;
					this.SendPropertyChanged("BasicSalary");
					this.OnBasicSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkingDays", DbType="Int NOT NULL")]
		public int WorkingDays
		{
			get
			{
				return this._WorkingDays;
			}
			set
			{
				if ((this._WorkingDays != value))
				{
					this.OnWorkingDaysChanging(value);
					this.SendPropertyChanging();
					this._WorkingDays = value;
					this.SendPropertyChanged("WorkingDays");
					this.OnWorkingDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OvertimeHours", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> OvertimeHours
		{
			get
			{
				return this._OvertimeHours;
			}
			set
			{
				if ((this._OvertimeHours != value))
				{
					this.OnOvertimeHoursChanging(value);
					this.SendPropertyChanging();
					this._OvertimeHours = value;
					this.SendPropertyChanged("OvertimeHours");
					this.OnOvertimeHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Allowance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Allowance
		{
			get
			{
				return this._Allowance;
			}
			set
			{
				if ((this._Allowance != value))
				{
					this.OnAllowanceChanging(value);
					this.SendPropertyChanging();
					this._Allowance = value;
					this.SendPropertyChanged("Allowance");
					this.OnAllowanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bonus", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				if ((this._Bonus != value))
				{
					this.OnBonusChanging(value);
					this.SendPropertyChanging();
					this._Bonus = value;
					this.SendPropertyChanged("Bonus");
					this.OnBonusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deduction", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Deduction
		{
			get
			{
				return this._Deduction;
			}
			set
			{
				if ((this._Deduction != value))
				{
					this.OnDeductionChanging(value);
					this.SendPropertyChanging();
					this._Deduction = value;
					this.SendPropertyChanged("Deduction");
					this.OnDeductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomeTax", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> IncomeTax
		{
			get
			{
				return this._IncomeTax;
			}
			set
			{
				if ((this._IncomeTax != value))
				{
					this.OnIncomeTaxChanging(value);
					this.SendPropertyChanging();
					this._IncomeTax = value;
					this.SendPropertyChanged("IncomeTax");
					this.OnIncomeTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SocialInsurance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> SocialInsurance
		{
			get
			{
				return this._SocialInsurance;
			}
			set
			{
				if ((this._SocialInsurance != value))
				{
					this.OnSocialInsuranceChanging(value);
					this.SendPropertyChanging();
					this._SocialInsurance = value;
					this.SendPropertyChanged("SocialInsurance");
					this.OnSocialInsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetSalary", AutoSync=AutoSync.Always, DbType="Decimal(23,2)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> NetSalary
		{
			get
			{
				return this._NetSalary;
			}
			set
			{
				if ((this._NetSalary != value))
				{
					this.OnNetSalaryChanging(value);
					this.SendPropertyChanging();
					this._NetSalary = value;
					this.SendPropertyChanged("NetSalary");
					this.OnNetSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Salary_SalaryDetail", Storage="_Salary", ThisKey="SalaryID", OtherKey="id", IsForeignKey=true)]
		public Salary Salary
		{
			get
			{
				return this._Salary.Entity;
			}
			set
			{
				Salary previousValue = this._Salary.Entity;
				if (((previousValue != value) 
							|| (this._Salary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Salary.Entity = null;
						previousValue.SalaryDetails.Remove(this);
					}
					this._Salary.Entity = value;
					if ((value != null))
					{
						value.SalaryDetails.Add(this);
						this._SalaryID = value.id;
					}
					else
					{
						this._SalaryID = default(int);
					}
					this.SendPropertyChanged("Salary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SalaryDetail", Storage="_Staff", ThisKey="StaffId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.SalaryDetails.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.SalaryDetails.Add(this);
						this._StaffId = value.id;
					}
					else
					{
						this._StaffId = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private string _role;
		
		private System.Nullable<System.DateTime> _dob;
		
		private string _gender;
		
		private string _phoneNumber;
		
		private string _email;
		
		private string _homeAddress;
		
		private string _citizenID;
		
		private string _departmentID;
		
		private string _position;
		
		private string _qualification;
		
		private string _degree;
		
		private string _status;
		
		private System.Nullable<System.DateTime> _startDate;
		
		private string _Notes;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<SupplyHistory> _SupplyHistories;
		
		private EntitySet<Appointment> _Appointments;
		
		private EntitySet<DailyCare> _DailyCares;
		
		private EntitySet<DoctorPatient> _DoctorPatients;
		
		private EntitySet<MedicalOrder> _MedicalOrders;
		
		private EntitySet<MedicalRecord> _MedicalRecords;
		
		private EntitySet<SalaryDetail> _SalaryDetails;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void OndobChanging(System.Nullable<System.DateTime> value);
    partial void OndobChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnhomeAddressChanging(string value);
    partial void OnhomeAddressChanged();
    partial void OncitizenIDChanging(string value);
    partial void OncitizenIDChanged();
    partial void OndepartmentIDChanging(string value);
    partial void OndepartmentIDChanged();
    partial void OnpositionChanging(string value);
    partial void OnpositionChanged();
    partial void OnqualificationChanging(string value);
    partial void OnqualificationChanged();
    partial void OndegreeChanging(string value);
    partial void OndegreeChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnstartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartDateChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public Staff()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._SupplyHistories = new EntitySet<SupplyHistory>(new Action<SupplyHistory>(this.attach_SupplyHistories), new Action<SupplyHistory>(this.detach_SupplyHistories));
			this._Appointments = new EntitySet<Appointment>(new Action<Appointment>(this.attach_Appointments), new Action<Appointment>(this.detach_Appointments));
			this._DailyCares = new EntitySet<DailyCare>(new Action<DailyCare>(this.attach_DailyCares), new Action<DailyCare>(this.detach_DailyCares));
			this._DoctorPatients = new EntitySet<DoctorPatient>(new Action<DoctorPatient>(this.attach_DoctorPatients), new Action<DoctorPatient>(this.detach_DoctorPatients));
			this._MedicalOrders = new EntitySet<MedicalOrder>(new Action<MedicalOrder>(this.attach_MedicalOrders), new Action<MedicalOrder>(this.detach_MedicalOrders));
			this._MedicalRecords = new EntitySet<MedicalRecord>(new Action<MedicalRecord>(this.attach_MedicalRecords), new Action<MedicalRecord>(this.detach_MedicalRecords));
			this._SalaryDetails = new EntitySet<SalaryDetail>(new Action<SalaryDetail>(this.attach_SalaryDetails), new Action<SalaryDetail>(this.detach_SalaryDetails));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Char(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="NVarChar(50)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date")]
		public System.Nullable<System.DateTime> dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NVarChar(10)")]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(15)")]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(100)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_homeAddress", DbType="VarChar(255)")]
		public string homeAddress
		{
			get
			{
				return this._homeAddress;
			}
			set
			{
				if ((this._homeAddress != value))
				{
					this.OnhomeAddressChanging(value);
					this.SendPropertyChanging();
					this._homeAddress = value;
					this.SendPropertyChanged("homeAddress");
					this.OnhomeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_citizenID", DbType="VarChar(12)")]
		public string citizenID
		{
			get
			{
				return this._citizenID;
			}
			set
			{
				if ((this._citizenID != value))
				{
					this.OncitizenIDChanging(value);
					this.SendPropertyChanging();
					this._citizenID = value;
					this.SendPropertyChanged("citizenID");
					this.OncitizenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departmentID", DbType="Char(10)")]
		public string departmentID
		{
			get
			{
				return this._departmentID;
			}
			set
			{
				if ((this._departmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._departmentID = value;
					this.SendPropertyChanged("departmentID");
					this.OndepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_position", DbType="NVarChar(50)")]
		public string position
		{
			get
			{
				return this._position;
			}
			set
			{
				if ((this._position != value))
				{
					this.OnpositionChanging(value);
					this.SendPropertyChanging();
					this._position = value;
					this.SendPropertyChanged("position");
					this.OnpositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qualification", DbType="NVarChar(100)")]
		public string qualification
		{
			get
			{
				return this._qualification;
			}
			set
			{
				if ((this._qualification != value))
				{
					this.OnqualificationChanging(value);
					this.SendPropertyChanging();
					this._qualification = value;
					this.SendPropertyChanged("qualification");
					this.OnqualificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_degree", DbType="VarChar(100)")]
		public string degree
		{
			get
			{
				return this._degree;
			}
			set
			{
				if ((this._degree != value))
				{
					this.OndegreeChanging(value);
					this.SendPropertyChanging();
					this._degree = value;
					this.SendPropertyChanged("degree");
					this.OndegreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(20)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date")]
		public System.Nullable<System.DateTime> startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Account", Storage="_Accounts", ThisKey="id", OtherKey="staffID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SupplyHistory", Storage="_SupplyHistories", ThisKey="id", OtherKey="nurseID")]
		public EntitySet<SupplyHistory> SupplyHistories
		{
			get
			{
				return this._SupplyHistories;
			}
			set
			{
				this._SupplyHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Appointment", Storage="_Appointments", ThisKey="id", OtherKey="doctorID")]
		public EntitySet<Appointment> Appointments
		{
			get
			{
				return this._Appointments;
			}
			set
			{
				this._Appointments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DailyCare", Storage="_DailyCares", ThisKey="id", OtherKey="nurseID")]
		public EntitySet<DailyCare> DailyCares
		{
			get
			{
				return this._DailyCares;
			}
			set
			{
				this._DailyCares.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_DoctorPatient", Storage="_DoctorPatients", ThisKey="id", OtherKey="doctorID")]
		public EntitySet<DoctorPatient> DoctorPatients
		{
			get
			{
				return this._DoctorPatients;
			}
			set
			{
				this._DoctorPatients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_MedicalOrder", Storage="_MedicalOrders", ThisKey="id", OtherKey="DoctorID")]
		public EntitySet<MedicalOrder> MedicalOrders
		{
			get
			{
				return this._MedicalOrders;
			}
			set
			{
				this._MedicalOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_MedicalRecord", Storage="_MedicalRecords", ThisKey="id", OtherKey="doctorID")]
		public EntitySet<MedicalRecord> MedicalRecords
		{
			get
			{
				return this._MedicalRecords;
			}
			set
			{
				this._MedicalRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_SalaryDetail", Storage="_SalaryDetails", ThisKey="id", OtherKey="StaffId")]
		public EntitySet<SalaryDetail> SalaryDetails
		{
			get
			{
				return this._SalaryDetails;
			}
			set
			{
				this._SalaryDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Staff", Storage="_Department", ThisKey="departmentID", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._departmentID = value.id;
					}
					else
					{
						this._departmentID = default(string);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_SupplyHistories(SupplyHistory entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Appointments(Appointment entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_DailyCares(DailyCare entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_DailyCares(DailyCare entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_DoctorPatients(DoctorPatient entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_DoctorPatients(DoctorPatient entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_MedicalOrders(MedicalOrder entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_MedicalRecords(MedicalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_MedicalRecords(MedicalRecord entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_SalaryDetails(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_SalaryDetails(SalaryDetail entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
}
#pragma warning restore 1591
